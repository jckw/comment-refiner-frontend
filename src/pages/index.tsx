import Head from "next/head"
import { Inter } from "next/font/google"
import styles from "@/styles/Home.module.css"

const inter = Inter({ subsets: ["latin"] })
import { useCallback, useEffect, useState } from "react"

const article =
  "- Elon Musk, the owner of X (formerly Twitter), has suggested implementing a small monthly fee for users to address the proliferation of bots on the social media platform.\n- Currently, the X platform only offers one subscription called Premium, which provides additional features and can cost up to $115 per year.\n- Musk's idea to charge all users could potentially lead to a decrease in the number of users and advertising revenue, which currently makes up the majority of X's income.\n- Musk made these comments during a livestreamed conversation with Israeli Prime Minister Benjamin Netanyahu, where they discussed the challenges of managing free speech and hate speech on the platform."

export default function Home() {
  const [userInput, setUserInput] = useState("")
  const [message, setMessage] = useState("")
  const [isLoading, setIsLoading] = useState(false)
  const [chatId, setChatId] = useState(null)

  const streamReply = useCallback(
    async (input: string) => {
      setIsLoading(true)
      setMessage("")

      const response = await fetch("http://127.0.0.1:5000/refine", {
        method: "POST",
        body: JSON.stringify({
          article,
          user_input: input,
          chat_id: chatId,
        }),
        headers: {
          "Content-Type": "application/json",
        },
      })

      const reader = response.body?.getReader()

      let { value, done } = await reader?.read()!
      while (!done) {
        const parsedChunks = new TextDecoder("utf-8")
          .decode(value)
          .split("}")
          .slice(0, -1)
          .map((chunk) => chunk + "}")
        console.log(parsedChunks)

        parsedChunks.forEach((parsedChunk) => {
          const dataChunk = JSON.parse(parsedChunk)
          setChatId(dataChunk.chat_id)
          setMessage((prev) => prev + dataChunk.delta)
        })

        const nextChunk = await reader?.read()!

        value = nextChunk.value
        done = nextChunk.done
      }

      setIsLoading(false)
    },
    [chatId]
  )

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={`${styles.main} ${inter.className}`}>
        <div className={styles.description}>
          <p>{message}</p>
        </div>
        {article.split("\n").map((line, i) => (
          <p key={i}>{line}</p>
        ))}
        <div className={styles.description}>
          <input
            type="text"
            onChange={(e) => setUserInput(e.target.value)}
            value={userInput}
          />
          <button onClick={() => streamReply(userInput)}>
            {isLoading ? "Loading..." : "Submit"}
          </button>
        </div>
      </main>
    </>
  )
}
