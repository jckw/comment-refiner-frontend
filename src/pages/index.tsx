import Head from "next/head"

import { useCallback, useEffect, useState } from "react"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Card, CardContent, CardFooter, CardHeader } from "@/components/ui/card"
import { Avatar } from "@radix-ui/react-avatar"
import randomColor from "randomcolor"
import ReactMarkdown from "react-markdown"

const ChatBar = ({ storyId }: { storyId: string }) => {
  const [chatId, setChatId] = useState(null)
  const [userInput, setUserInput] = useState("")
  const [message, setMessage] = useState("")
  const [isLoading, setIsLoading] = useState(false)

  const streamReply = useCallback(
    async (input: string) => {
      setIsLoading(true)
      setMessage("")

      const response = await fetch(
        `${process.env.NEXT_PUBLIC_API_HOST}/refine`,
        {
          method: "POST",
          body: JSON.stringify({
            story_id: storyId,
            user_input: input,
            chat_id: chatId,
          }),
          headers: {
            "Content-Type": "application/json",
          },
        }
      )

      const reader = response.body?.getReader()

      let { value, done } = await reader?.read()!
      while (!done) {
        const parsedChunks = new TextDecoder("utf-8")
          .decode(value)
          .split("}")
          .slice(0, -1)
          .map((chunk) => chunk + "}")
        console.log(parsedChunks)

        parsedChunks.forEach((parsedChunk) => {
          const dataChunk = JSON.parse(parsedChunk)
          setChatId(dataChunk.chat_id)
          setMessage((prev) => prev + dataChunk.delta)
        })

        const nextChunk = await reader?.read()!

        value = nextChunk.value
        done = nextChunk.done
      }

      setIsLoading(false)
    },
    [chatId, storyId]
  )

  return (
    <div className="flex-1">
      <div style={{ position: "relative" }}>
        {message ? (
          <div className="absolute bottom-0 bg-white p-4 rounded-lg border bg-card text-card-foreground shadow-sm">
            <p className="font-mono">{message}</p>
          </div>
        ) : null}
      </div>
      <div className="flex gap-2 pt-2">
        <Input
          className="flex-1"
          type="text"
          onChange={(e) => setUserInput(e.target.value)}
          value={userInput}
          placeholder="Leave a comment"
        />
        <Button onClick={() => streamReply(userInput)}>
          {isLoading ? "Loading..." : "Submit"}
        </Button>
      </div>
    </div>
  )
}

type Story = {
  id: string
  title: string
  summary: string
  comments?: { id: string; text: string }[]
}

const StoryCard = ({ story }: { story: Story }) => {
  return (
    <Card className="mb-8">
      <CardHeader>
        <h2 className="font-semibold text-lg">{story.title}</h2>
      </CardHeader>
      <CardContent>
        <ReactMarkdown>{story.summary}</ReactMarkdown>
        <div className="mt-3">
          {story.comments?.map((comment) => (
            <div
              key={comment.id}
              className="flex items-start gap-2 mb-2 text-gray-700"
            >
              <Avatar className="pt-1">
                <div
                  style={{
                    backgroundColor: randomColor({ seed: comment.id }),
                    width: 24,
                    height: 24,
                    borderRadius: 24,
                  }}
                />
              </Avatar>
              <div className="text-sm gray-100">{comment.text}</div>
            </div>
          ))}
        </div>
      </CardContent>
      <CardFooter>
        <ChatBar storyId={story.id} />
      </CardFooter>
    </Card>
  )
}

export default function Home() {
  const [stories, setStories] = useState<Story[]>([])

  useEffect(() => {
    fetch(`${process.env.NEXT_PUBLIC_API_HOST}/news/stories`)
      .then((res) => res.json())
      .then((data) => {
        setStories(data)
      })
  }, [])

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center justify-between p-24">
        <div>
          {stories.map((story) => (
            <StoryCard story={story} key={story.id} />
          ))}
        </div>
      </main>
    </>
  )
}
