import Head from "next/head"
import { Inter } from "next/font/google"
import styles from "@/styles/Home.module.css"

const inter = Inter({ subsets: ["latin"] })
import { useCallback, useEffect, useState } from "react"

export default function Home() {
  const [userInput, setUserInput] = useState("")
  const [message, setMessage] = useState("")
  const [isLoading, setIsLoading] = useState(false)
  const [chatId, setChatId] = useState(null)
  const [stories, setStories] = useState<
    {
      id: string
      title: string
      summary: string
      comments?: { id: string; text: string }[]
    }[]
  >([])
  const [selectedStoryIdx, setSelectedStoryIdx] = useState<number | null>(null)

  useEffect(() => {
    fetch(`${process.env.NEXT_PUBLIC_API_HOST}/news/stories`)
      .then((res) => res.json())
      .then((data) => {
        setStories(data)
        setSelectedStoryIdx(0)
      })
  }, [])

  const streamReply = useCallback(
    async (input: string) => {
      setIsLoading(true)
      setMessage("")

      const response = await fetch(
        `${process.env.NEXT_PUBLIC_API_HOST}/refine`,
        {
          method: "POST",
          body: JSON.stringify({
            article: stories[selectedStoryIdx!].summary,
            user_input: input,
            chat_id: chatId,
          }),
          headers: {
            "Content-Type": "application/json",
          },
        }
      )

      const reader = response.body?.getReader()

      let { value, done } = await reader?.read()!
      while (!done) {
        const parsedChunks = new TextDecoder("utf-8")
          .decode(value)
          .split("}")
          .slice(0, -1)
          .map((chunk) => chunk + "}")
        console.log(parsedChunks)

        parsedChunks.forEach((parsedChunk) => {
          const dataChunk = JSON.parse(parsedChunk)
          setChatId(dataChunk.chat_id)
          setMessage((prev) => prev + dataChunk.delta)
        })

        const nextChunk = await reader?.read()!

        value = nextChunk.value
        done = nextChunk.done
      }

      setIsLoading(false)
    },
    [chatId, selectedStoryIdx, stories]
  )

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={`${styles.main} ${inter.className}`}>
        <div>
          {stories.map((story, i) => (
            <div
              key={story.id}
              style={selectedStoryIdx === i ? { backgroundColor: "red" } : {}}
              onClick={() => setSelectedStoryIdx(stories.indexOf(story))}
            >
              <h2>{story.title}</h2>
              <p>{story.summary}</p>
              <div>
                {story.comments?.map((comment) => (
                  <div
                    key={comment.id}
                    style={{ padding: 8, fontSize: "12px" }}
                  >
                    {comment.text}
                  </div>
                ))}
              </div>
            </div>
          ))}
        </div>

        <div className={styles.description}>
          <p>{message}</p>
        </div>
        <div className={styles.description}>
          <input
            type="text"
            onChange={(e) => setUserInput(e.target.value)}
            value={userInput}
          />
          <button onClick={() => streamReply(userInput)}>
            {isLoading ? "Loading..." : "Submit"}
          </button>
        </div>
      </main>
    </>
  )
}
